#!/usr/bin/env python3

import sys
import argparse
import signal
import logging
import logging.handlers
import configparser

from openhd import MavlinkTelemetry

# The first and only argument should be the component config file.
if len(sys.argv) != 2:
    sys.stderr.write("Usage: " + sys.argv[0] + " <config file>\n")
    exit(1)
config_filename = sys.argv[1]

# Read the config file
config = configparser.ConfigParser()
config['global'] = {
    'log_level': 'critical',
    'syslog_level': 'info',
    'telemetry_uart': '/dev/ttyS0',
    'telemetry_baudrate': 115200,
    'rc_host': '127.0.0.1',
    'rc_port': 15441,
    'telemetry_protocol': 'mavlink',
    'telemetry_host': '127.0.0.1',
    'telemetry_port': 14550,
    'telemetry_uart': '/dev/ttyS0'
}
try:
    config.read(config_filename)
except:
    print("Error reading the configuration file: " + config_filename)
    exit

# Configure the logger
log_level = getattr(logging, config['global'].get('log_level').upper())
syslog_level = getattr(logging, config['global'].get('syslog_level').upper())
if not isinstance(log_level, int):
    print("Invalid log level: %s - setting to info" % (args.log_level))
    log_level = logging.INFO
if not isinstance(syslog_level, int):
    print("Invalid syslog level: %s - setting to info" % (args.syslog_level))
    syslog_level = logging.INFO
logger = logging.getLogger('openhd_camera')
stream_handler = logging.StreamHandler()
stream_handler.setLevel(log_level)
syslog_handler = logging.handlers.SysLogHandler(address = "/dev/log")
syslog_handler.setLevel(syslog_level)
logging.basicConfig(level=min(log_level, syslog_level), format="%(asctime)s %(levelname)s: %(message)s",
                    datefmt="%H:%M:%S", handlers = [stream_handler, syslog_handler])

# Define an exit handler to do a graceful shutdown
def exit_handler(sig, frame):
    telem.stop()
signal.signal(signal.SIGINT, exit_handler)

# Only mavlink passthrough is enabled currently
telem = MavlinkTelemetry.MavlinkTelemetry(uart=config['global']['telemetry_uart'],
                                          baudrate=config['global']['telemetry_baudrate'])
telem.join()
