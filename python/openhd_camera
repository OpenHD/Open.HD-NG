#!/usr/bin/env python3

import os
import sys

# Setup some paths based on the directory that this script was run frum.
root_dir = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))

# Add the library directory to the LD_LIBRARY_PATH environement variable.
lib_dir = os.path.join(root_dir, "lib")
# Add the bin directory to PATH
bin_dir = os.path.join(root_dir, "bin")
if 'LD_LIBRARY_PATH' not in os.environ:
    os.environ['LD_LIBRARY_PATH'] = lib_dir
else:
    os.environ['LD_LIBRARY_PATH'] += ":" + lib_dir
os.environ['PATH'] += ":" + bin_dir
if 'RE_EXECED' not in os.environ:
    try:
        os.environ['RE_EXECED'] = "1"
        os.execv(sys.argv[0], sys.argv)
    except Exception as exc:
        print('Failed re-exec:', exc)
        sys.exit(1)

import io
import time
import argparse
import signal
import logging
import logging.handlers
import configparser

from openhd import camera

# The first and only argument should be the component config file.
if len(sys.argv) != 2:
    sys.stderr.write("Usage: " + sys.argv[0] + " <config file>\n")
    exit(1)
config_filename = sys.argv[1]

# Read the config file
config = configparser.ConfigParser()
config['global'] = {
    'log_level': 'critical',
    'syslog_level': 'info',
    'primary_camera': True,
    'video_port': 5600,
    'video_width': 10000,
    'video_height': 10000,
    'video_blocksize': 1400,
    'fps': 60,
    'bitrate': 3000000,
    'quality': 20,
    'inline_headers': True,
    'intra_period': 5,
    'prefer_picam': True,
    'secondary_camera': False,
    'video_port_secondary': 5601,
    'video_width_secondary': 10000,
    'video_height_secondary': 10000,
    'video_blocksize_secondary': 1400,
    'fps_secondary': 60,
    'bitrate_secondary': 3000000,
    'quality_secondary': 20,
    'inline_headers_secondary': True,
    'intra_period_secondary': 5,
    'prefer_picam_secondary': True,
    'fec_ratio_secondary': 0
}
try:
    config.read(config_filename)
except:
    print("Error reading the configuration file: " + config_filename)
    exit

# Configure the logger
log_level = getattr(logging, config['global'].get('log_level').upper())
syslog_level = getattr(logging, config['global'].get('syslog_level').upper())
if not isinstance(log_level, int):
    print("Invalid log level: %s - setting to info" % (args.log_level))
    log_level = logging.INFO
if not isinstance(syslog_level, int):
    print("Invalid syslog level: %s - setting to info" % (args.syslog_level))
    syslog_level = logging.INFO
logger = logging.getLogger('openhd_camera')
stream_handler = logging.StreamHandler()
stream_handler.setLevel(log_level)
syslog_handler = logging.handlers.SysLogHandler(address = "/dev/log")
syslog_handler.setLevel(syslog_level)
logging.basicConfig(level=min(log_level, syslog_level), format="%(asctime)s %(levelname)s: %(message)s",
                    datefmt="%H:%M:%S", handlers = [stream_handler, syslog_handler])

# Detect the available cameras
cameras = camera.detect_cameras()
if len(cameras) == 0:
    logging.error("No cameras detected")
    exit(1)

# Determine the primary camera device
primary_camera = config['global'].get('primary_camera')
primary_camera_index = -1
if primary_camera is not False:
    if primary_camera == True or primary_camera == "True":
        primary_camera_index = 0
    else:
        for i, camer in enumerate(cameras):
            if camer[0]['device'] == primary_camera:
                primary_camera_index = i

# Determine the secondary camera device
secondary_camera = config['global'].get('secondary_camera')
secondary_camera_index = -1
if secondary_camera is not False:
    if secondary_camera == True or secondary_camera == "True":
        for i, camer in enumerate(cameras):
            if i != primary_camera_index:
                secondary_camera_index = i
                break
    else:
        for i, camer in enumerate(cameras):
            if camer[0]['device'] == secondary_camera:
                secondary_camera_index = i

cam = None
cam2 = None

# Define an exit handler to do a graceful shutdown
terminate = False
def exit_handler(sig, frame):
    if cam:
        cam.stop()
    if cam2:
        cam2.stop()
    terminate = True
signal.signal(signal.SIGINT, exit_handler)

# Create the primary camera process if we found a device to use
if primary_camera_index >= 0:
     cam = camera.CameraProcess(device=cameras[primary_camera_index][0]['device'],
                                     width=int(config['global'].get('video_width')),
                                     height=int(config['global'].get('video_height')),
                                     fps=int(config['global'].get('fps')),
                                     bitrate=int(config['global'].get('bitrate')),
                                     quality=int(config['global'].get('quality')),
                                     inline_headers=bool(config['global'].get('inline_headers')),
                                     intra_period=int(config['global'].get('intra_period')),
                                     prefer_picam=bool(config['global'].get('prefer_picam')),
                                     blocksize=int(config['global'].get('video_blocksize')),
                                     fec_ratio=float(config['global'].get('fec_ratio')),
                                     port=int(config['global'].get('video_port')))
     logging.info("Using %s as primary camera",
                  (cameras[primary_camera_index][0]['device']))
     cam.start()

# Start a secondary camera process?
if secondary_camera_index >= 0:
    cam2 = camera.CameraProcess(device=cameras[secondary_camera_index][0]['device'],
                                     width=int(config['global'].get('video_width_secondary')),
                                     height=int(config['global'].get('video_height_secondary')),
                                     fps=int(config['global'].get('fps_secondary')),
                                     bitrate=int(config['global'].get('bitrate_secondary')),
                                     quality=int(config['global'].get('quality_secondary')),
                                     inline_headers=bool(config['global'].get('inline_headers_secondary')),
                                     intra_period=int(config['global'].get('intra_period_secondary')),
                                     prefer_picam=bool(config['global'].get('prefer_picam_secondary')),
                                     blocksize=int(config['global'].get('video_blocksize_secondary')),
                                     fec_ratio=float(config['global'].get('fec_ratio_secondary')),
                                     port=int(config['global'].get('video_port_secondary')))
    logging.info("Using %s as secondary camera",
                 (cameras[secondary_camera_index][0]['device']))
    cam2.start()

cam.join()
if cam2:
    cam2.join()
