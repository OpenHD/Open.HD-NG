#!/usr/bin/env python3

import os
import sys
import signal
import logging
import logging.handlers
import configparser

from openhd import mavlink as mav

# The first and only argument should be the component config file.
if len(sys.argv) != 2 or not os.path.isfile(sys.argv[1]):
    sys.stderr.write("Usage: " + sys.argv[0] + " <config file>\n")
    exit(1)
config_filename = sys.argv[1]

# Read the config file
config = configparser.ConfigParser()
config['global'] = {
    'log_level': 'critical',
    'syslog_level': 'info',
}
try:
    config.read(config_filename)
except:
    print("Error reading the configuration file: " + config_filename)
    exit

# Configure the logger
log_level = getattr(logging, config['global'].get('log_level').upper())
syslog_level = getattr(logging, config['global'].get('syslog_level').upper())
if not isinstance(log_level, int):
    print("Invalid log level: %s - setting to info" % (args.log_level))
    log_level = logging.INFO
if not isinstance(syslog_level, int):
    print("Invalid syslog level: %s - setting to info" % (args.syslog_level))
    syslog_level = logging.INFO
logger = logging.getLogger('wifi_config')
stream_handler = logging.StreamHandler()
stream_handler.setLevel(log_level)
syslog_handler = logging.handlers.SysLogHandler(address = "/dev/log")
syslog_handler.setLevel(syslog_level)
logging.basicConfig(level=min(log_level, syslog_level), format="%(asctime)s %(levelname)s: %(message)s",
                    datefmt="%H:%M:%S", handlers = [stream_handler, syslog_handler])

handlers = []

def handler(signal_received, frame):
    '''A signal handler to that will initiate a clean shutdown of the script'''
    for h in handlers:
        h.terminate()


if __name__ == '__main__':

    # Retrieve the configuration parameters
    local_host = config['ground_telemetry'].get('host')
    local_port = int(config['ground_telemetry'].get('port'))
    target_host = config['ground_telemetry'].get('rc_host')
    target_port = int(config['ground_telemetry'].get('rc_port'))
    gcs_port = int(config['ground_telemetry'].get('gcs_port'))
    status_port = int(config['ground_telemetry'].get('status_port'))

    # Setup the exit signal handler
    signal.signal(signal.SIGINT, handler)

    # Create the connection to the wifibroadcast link
    logging.debug("Creating UDP interface (%s:%d) to (%s:%d)" % (local_host, local_port, target_host, target_port))
    wfb_end = mav.UDPEndpoint("WFB", local_host, local_port, target_host, target_port)
    handlers.append(wfb_end)

    # Create the connection to receive wifibroadcast status on
    logging.debug("Receiving wifibroadcast status on %d" % (status_port))
    status_end = mav.WFBStatusEndpoint("Status", port=status_port)
    handlers.append(status_end)
    
    # Create the connection that can be used to connect to a standard GCS
    logging.debug("Creating GCS-type UDP interface on port %d" % (int(gcs_port)))
    gcs_end = mav.UDPSource("GCS", gcs_port)
    handlers.append(gcs_end)

    # Create the routeing links
    wfb_end.add_route(gcs_end)
    status_end.add_route(gcs_end)
    gcs_end.add_route(wfb_end)

    # Wait for the endpoints to shutdown then exit
    for h in handlers:
        h.join()
    exit(0)
