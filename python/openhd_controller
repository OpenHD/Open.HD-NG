#!/usr/bin/env python3

import os
import sys

# Setup some paths based on the directory that this script was run frum.
root_dir = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))

# Add the library directory to the LD_LIBRARY_PATH environement variable.
lib_dir = os.path.join(root_dir, "lib")
# Add the bin directory to PATH
bin_dir = os.path.join(root_dir, "bin")
if 'LD_LIBRARY_PATH' not in os.environ:
    os.environ['LD_LIBRARY_PATH'] = lib_dir
else:
    os.environ['LD_LIBRARY_PATH'] += ":" + lib_dir
os.environ['PATH'] += ":" + bin_dir
if 'RE_EXECED' not in os.environ:
    try:
        os.environ['RE_EXECED'] = "1"
        os.execv(sys.argv[0], sys.argv)
    except Exception as exc:
        print('Failed re-exec:', exc)
        sys.exit(1)

# Add the python directory to the python path
python_dir = os.path.join(root_dir, "lib/python" + str(sys.version_info.major) + \
                          "." + str(sys.version_info.minor) + "/site-packages")
sys.path.append(python_dir)

import io
import time
import queue
import argparse
import signal
import logging
import logging.handlers
import configparser
import multiprocessing as mp

from openhd import camera, telemetry, settings, video_player

# Define an exit handler to do a graceful shutdown
def exit_handler(sig, frame):
    sys.exit()

if __name__ == '__main__':

    # This program normally gets it's configuration from it's own config file,
    # but a second, OpenHD config file can also be used to update the setting
    # and also update the setting of the other OpenHD components.
    #
    # The first argument should be the component config file.
    # An option second argument is the OpenHD config file
    if len(sys.argv) != 2 and len(sys.argv) != 3:
        sys.stderr.write("Usage: " + sys.argv[0] + " <config file> [Open.HD config file]\n")
        exit(1)
    config_filename = sys.argv[1]

    # Read the config file
    config = configparser.ConfigParser()
    config['global'] = {
        'loglevel': 'error',
        'video_width': 10000,
        'video_height': 10000,
        'fps': 60,
        'bitrate': 3000000,
        'quality': 20,
        'inline_headers': True,
        'intra_period': 5,
        'prefer_picam': True,
        'fec_ratio': 0,
        'telemetry_uart': '/dev/ttyS0',
        'telemetry_baudrate': 57600,
        'rc_host': '127.0.0.1',
        'rc_port': 15441,
        'telemetry_protocol': 'mavlink',
        'telemetry_host': '127.0.0.1',
        'telemetry_port': 14550,
        'telemetry_uart': '/dev/ttyS0'
    }
    try:
        config.read(config_filename)
    except:
        print("Error reading the configuration file: " + config_filename)
        exit

    # Configure the logger
    log_level = getattr(logging, config['global'].get('loglevel').upper())
    if not isinstance(log_level, int):
        print("Invalid log level: %s - setting to info" % (args.loglevel))
        log_level = logging.INFO
    logger = logging.getLogger('openhd_controller')
    logging.basicConfig(level=log_level, format="%(asctime)s %(levelname)s: %(message)s", datefmt="%H:%M:%S",
                        handlers = [logging.StreamHandler(), logging.handlers.SysLogHandler(address = "/dev/log")])
    logging.info("Logging at level: " + config['global'].get('loglevel'))

    # Determine if we're running as ground or air by detecting if a camera is present
    if camera.detect_cameras(if_exists=True):
        is_ground = False
        logging.info("At least one camera detected, so running in Air mode")
    else:
        is_ground = True
        logging.info("No camera detected, so running in Ground mode")

    # Parse the Open.HD config file if it exists.
    if len(sys.argv) == 3:
        if os.path.exists(sys.argv[2]):
            if is_ground:
                logging.info("Updating settings as ground from: " + sys.argv[2])
            else:
                logging.info("Updating settings as air from: " + sys.argv[2])
            sf = settings.Settings(sys.argv[2]) 
            sf.update(is_ground)

            # Reload our configuration file
            config.read(config_filename)

        else:
            logging.info("Open.HD settings file: " + sys.argv[2] + " does not exist")

        
    # Setup an exit handler to gracefully exit
    signal.signal(signal.SIGINT, exit_handler)

    # Start the camera process if we're the air side
    if not is_ground:
        cam = camera.CameraProcess(width=int(config['global'].get('video_width')),
                                   height=int(config['global'].get('video_height')),
                                   fps=int(config['global'].get('fps')),
                                   bitrate=int(config['global'].get('bitrate')),
                                   quality=int(config['global'].get('quality')),
                                   inline_headers=bool(config['global'].get('inline_headers')),
                                   intra_period=int(config['global'].get('intra_period')),
                                   prefer_picam=bool(config['global'].get('prefer_picam')),
                                   fec_ratio=float(config['global'].get('fec_ratio')))
        cam.start()
    else:
        cam = None

    # Start the telemetry parsers / forwarders
    if not is_ground:
        telem = telemetry.Telemetry(protocol=config['global'].get('telemetry_protocol'),
                                    uart=config['global'].get('telemetry_uart'),
                                    baudrate=config['global'].get('telemetry_baudrate'),
                                    host=config['global'].get('telemetry_host'),
                                    port=int(config['global'].get('telemetry_port')))
    else:
        telem = None

    # Start the video/osd player if ground
    if is_ground:
        video = video_player.VideoPlayer()
        if not video.running():
            video = None
    else:
        video = None

    # Wait for the processing threads to exit
    if is_ground:
        logging.info("Running in Ground mode")
    else:
        logging.info("Running in Air mode")
    if telem:
        telem.join()
    if cam:
        cam.join()
    if video:
        video.join()
    if not telem and not cam and not video:
        while 1:
            time.sleep(1)

