#!/usr/bin/env python3

import os
import sys

import io
import time
import queue
import argparse
import signal
import logging
from functools import partial
import logging.handlers
import configparser
import pyudev as udev

from openhd import camera

# Create the udev class for receiving events when USB cameras are plugged/unplugged
udev_context = udev.Context()

# The first and only argument should be the component config file.
if len(sys.argv) != 2 or not os.path.isfile(sys.argv[1]):
    sys.stderr.write("Usage: " + sys.argv[0] + " <config file>\n")
    exit(1)
config_filename = sys.argv[1]

# Read the config file
config = configparser.ConfigParser()
config['global'] = {
    'log_level': 'critical',
    'syslog_level': 'info',
}
try:
    config.read(config_filename)
except:
    print("Error reading the configuration file: " + config_filename)
    exit

# Configure the logger
log_level = getattr(logging, config['global'].get('log_level').upper())
syslog_level = getattr(logging, config['global'].get('syslog_level').upper())
if not isinstance(log_level, int):
    print("Invalid log level: %s - setting to info" % (args.log_level))
    log_level = logging.INFO
if not isinstance(syslog_level, int):
    print("Invalid syslog level: %s - setting to info" % (args.syslog_level))
    syslog_level = logging.INFO
logger = logging.getLogger('wifi_config')
stream_handler = logging.StreamHandler()
stream_handler.setLevel(log_level)
syslog_handler = logging.handlers.SysLogHandler(address = "/dev/log")
syslog_handler.setLevel(syslog_level)
logging.basicConfig(level=min(log_level, syslog_level), format="%(asctime)s %(levelname)s: %(message)s",
                    datefmt="%H:%M:%S", handlers = [stream_handler, syslog_handler])

# Determine if we're running as ground or air by detecting if a camera is present
def detect_cameras():
    os.system("/bin/systemctl stop air.target")
    os.system("/bin/systemctl stop ground.target")
    cameras = camera.detect_cameras()
    if len(cameras) > 0 and mode != "air":
        logging.info("At least one camera detected, so running in Air mode")
        os.system("/bin/systemctl start air.target")
    elif mode != "ground":
        logging.info("No camera detected, so running in Ground mode")
        os.system("/bin/systemctl start ground.target")

# Define an exit handler to do a graceful shutdown
def exit_handler(sig, frame):
    exit(0)
signal.signal(signal.SIGINT, exit_handler)

# First try to detect any cameras already present.
mode = None
detect_cameras()

# Monitor for any camera getting plugged in or unplugged
monitor = udev.Monitor.from_netlink(udev_context)
monitor.filter_by(subsystem='video4linux')
# Wait as long as it takes to get the first change
for device in iter(monitor.poll, None):
    logging.debug("Detected camera change")
    # Some devices create multiple device nodes.
    # This should compress all the events down to one
    for device in iter(partial(monitor.poll, 1), None):
        logging.debug("Ignoring a camera change")
    # (re)detect the cameras
    detect_cameras()
